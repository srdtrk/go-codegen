package codegen

import (
	"bytes"
	"fmt"
	"os"
	"regexp"

	"github.com/dave/jennifer/jen"

	"github.com/srdtrk/go-codegen/pkg/schemas"
)

func GenerateCodeFromIDLSchema(idlSchema *schemas.IDLSchema, packageName string) (*jen.File, error) {
	if idlSchema == nil {
		panic("idlSchema is nil")
	}

	if packageName == "" {
		if idlSchema.ContractName == "" {
			panic("no contract name")
		}

		packageName = idlSchema.ContractName
	}

	nonAlphabeticRegex := regexp.MustCompile(`[^a-zA-Z ]+`)
	packageName = nonAlphabeticRegex.ReplaceAllString(packageName, "")

	f := jen.NewFile(packageName)
	f.PackageComment("/* Code generated by github.com/srdtrk/go-codegen, DO NOT EDIT. */")

	if idlSchema.Instantiate == nil {
		panic("no InstantiateMsg schema")
	}

	GenerateInstantiateMsg(f, idlSchema.Instantiate)
	GenerateExecuteMsg(f, idlSchema.Execute)
	GenerateSudoMsg(f, idlSchema.Sudo)
	GenerateMigrateMsg(f, idlSchema.Migrate)
	GenerateQueryMsg(f, idlSchema.Query)
	GenerateResponses(f, idlSchema.Responses)

	generateDefinitions(f)

	return f, nil
}

func ValidateOutputFile(jenFile *jen.File, outputFilePath string) error {
	fileContents, err := os.ReadFile(outputFilePath)
	if err != nil {
		return err
	}

	buffer := &bytes.Buffer{}
	if err := jenFile.Render(buffer); err != nil {
		return err
	}

	fmt.Println(len(string(fileContents)), len(buffer.String()))

	fmt.Println("File Contents:", string(fileContents))
	fmt.Println("Buffer Contents:", buffer.String())

	if string(fileContents) != buffer.String() {
		return fmt.Errorf("output file is not up-to-date")
	}

	return nil
}
