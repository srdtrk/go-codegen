package e2esuite

import (
	"context"

	"cosmossdk.io/math"

	sdk "github.com/cosmos/cosmos-sdk/types"
	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"

	"github.com/strangelove-ventures/interchaintest/v8/chain/cosmos"
	"github.com/strangelove-ventures/interchaintest/v8/ibc"
	"github.com/strangelove-ventures/interchaintest/v8/testutil"
)

// FundAddressChainA sends funds to the given address on chain A.
// The amount sent is 1,000,000,000 of the chain's denom.
func (s *TestSuite) FundAddressChainA(ctx context.Context, address string) {
	s.fundAddress(ctx, s.ChainA, s.UserA.KeyName(), address)
}

// FundAddressChainB sends funds to the given address on chain B.
// The amount sent is 1,000,000,000 of the chain's denom.
func (s *TestSuite) FundAddressChainB(ctx context.Context, address string) {
	s.fundAddress(ctx, s.ChainB, s.UserB.KeyName(), address)
}

// GetModuleAddress returns the address of the given module on the given chain.
// Added because interchaintest's method doesn't work.
func (s *TestSuite) GetModuleAddress(ctx context.Context, chain *cosmos.CosmosChain, moduleName string) string {
	modAccResp, err := GRPCQuery[authtypes.QueryModuleAccountByNameResponse](
		ctx, chain, &authtypes.QueryModuleAccountByNameRequest{Name: moduleName},
	)
	s.Require().NoError(err)

	cfg := chain.Config().EncodingConfig
	var account sdk.AccountI
	err = cfg.InterfaceRegistry.UnpackAny(modAccResp.Account, &account)
	s.Require().NoError(err)

	govAccount, ok := account.(authtypes.ModuleAccountI)
	s.Require().True(ok)
	s.Require().NotEmpty(govAccount.GetAddress().String())

	return govAccount.GetAddress().String()
}

// fundAddress sends funds to the given address on the given chain
func (s *TestSuite) fundAddress(ctx context.Context, chain *cosmos.CosmosChain, keyName, address string) {
	err := chain.SendFunds(ctx, keyName, ibc.WalletAmount{
		Address: address,
		Denom:   chain.Config().Denom,
		Amount:  math.NewInt(1_000_000_000),
	})
	s.Require().NoError(err)

	// wait for 2 blocks for the funds to be received
	err = testutil.WaitForBlocks(ctx, 2, chain)
	s.Require().NoError(err)
}
